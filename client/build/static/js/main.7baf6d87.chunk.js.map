{"version":3,"sources":["dataBase/todoListSlice.ts","components/TodoItem.tsx","components/TodoList.tsx","components/Footer.tsx","socket.tsx","components/Header.tsx","components/Input.tsx","App.tsx","reportWebVitals.ts","dataBase/base.ts","index.tsx"],"names":["todoListSlice","createSlice","name","initialState","list","error","reducers","setList","state","action","payload","unSaved","changeItemState","isDone","deleteItem","splice","clearCompleted","filter","elem","forEach","item","index","editItem","text","setError","addTodo","undefined","unshift","setUnsavedTodo","changeAllStates","fetchDeletedItem","dispatch","fetchFunction","then","res","ok","catch","message","actions","url","method","body","fetch","headers","JSON","stringify","TodoItem","isEditing","useDispatch","history","useHistory","onChangeHandler","useCallback","fetchItemState","deleteHandler","itemChangeHandler","event","target","value","fetchEditedItem","onBlurHandler","push","onKeyPressHandler","key","className","hasOwnProperty","type","checked","readOnly","onChange","onClick","autoFocus","onBlur","onKeyPress","TodoList","useSelector","params","useParams","console","log","map","todo","i","Footer","listLength","length","doneTodosAmount","clearHandler","exact","to","activeClassName","socket","io","Header","parentState","keyPressHandler","e","isTyping","placeholder","Input","stateChanger","isMarked","id","htmlFor","App","useState","useEffect","on","json","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7baf6d87.chunk.js","sourcesContent":["import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {IState, ITodo, IUnsavedTodo} from '../interfaces'\n\nconst todoListSlice = createSlice({\n    name: 'todolist',\n    initialState: {\n        list: [],\n        error: null\n    } as IState,\n    reducers: {\n        setList(state, action: PayloadAction<{list: ITodo[], unSaved?: IUnsavedTodo}>) {\n          state.list = action.payload.list || state.list;\n          state.unSaved = action.payload.unSaved\n        },\n        changeItemState(state, action: PayloadAction<number>) {\n            state.list[action.payload].isDone = !state.list[action.payload].isDone\n        },\n        deleteItem(state, action: PayloadAction<number>) {\n            state.list.splice(action.payload, 1)\n        },\n        clearCompleted(state) {\n            state.list = state.list.filter(elem => !elem.isDone)\n            state.list.forEach((item, index) => item.index = index)\n        },\n        editItem(state, action: PayloadAction<{index: number, text: string}>) {\n            state.list[action.payload.index].text = action.payload.text\n        },\n        setError(state, action: PayloadAction<string>) {\n            state.error = action.payload;\n        },\n        addTodo(state, action: PayloadAction<string>) {\n            state.unSaved = undefined\n\n            state.list.unshift({\n                text: action.payload,\n                index: 0,\n                isDone: false,\n            })\n\n            state.list.forEach((item, index) => item.index = index)\n        },\n        setUnsavedTodo(state, action: PayloadAction<string>) {\n            if (action.payload) {\n                if (state.unSaved) {\n                    state.unSaved.text = action.payload;\n                }\n                else {\n                    state.unSaved = {\n                        text: action.payload,\n                        unSaved: true,\n                        isDone: false,\n                    }\n                }\n            }\n            else {\n                state.unSaved = undefined\n            }\n        },\n        changeAllStates(state, action) {\n            state.list.forEach(item => item.isDone = action.payload)\n        }\n    }\n})\n\nexport const getList = () => (dispatch: any) => {\n    fetchFunction('http://127.0.0.1:8000/api/getList', 'GET')\n        .then(res => res.json())\n        .then(res => {\n            if (res.hasOwnProperty('error')) {\n                dispatch(setError(res.error))\n            }\n            else {\n                dispatch(setList({list: res.list, unSaved: res.unSaved}))\n            }\n        })\n        .catch(error => dispatch(setError(error.message)))\n}\n\nexport const sendTodo = (text: string) => (dispatch: any) => {\n    fetchFunction(`http://127.0.0.1:8000/api/addTodo`, 'POST', {text: text})\n        .then(res => {\n            if (!res.ok) {\n                dispatch(setError('Server error'))\n            }\n        })\n        .catch(error => dispatch(setError(error.message)))\n}\n\nexport const sendUnSavedText = (text: string) => (dispatch :any) => {\n    fetchFunction(`http://127.0.0.1:8000/api/unSavedText`, 'POST', {text})\n        .then(res => {\n            if (!res.ok) {\n                dispatch(setError('Server error'))\n            }\n        })\n        .catch(error => dispatch(setError(error.message)))\n}\n\nexport const fetchAllStates = (state: boolean) => (dispatch: any) => {\n    fetchFunction(`http://127.0.0.1:8000/api/changeAllStates`, 'POST', {state})\n        .then(res => {\n            if (!res.ok) {\n                dispatch(setError('Server error'))\n            }\n        })\n        .catch(error => dispatch(setError(error.message)))\n}\n\nexport const fetchDeletedItem = (index: number) => (dispatch: any) => {\n    fetchFunction(`http://127.0.0.1:8000/api/deleteItem`, 'POST', {index})\n        .then(res => {\n            if (!res.ok) {\n                dispatch(setError('Server error'))\n            }\n        })\n        .catch(error => dispatch(setError(error.message)))\n}\n\nexport const fetchItemState = (index :number) => (dispatch: any) => {\n    fetchFunction(`http://127.0.0.1:8000/api/changeItemState`, 'PUT', {index})\n        .then(res => {\n            if (!res.ok) {\n                dispatch(setError('Server error'))\n            }\n        })\n        .catch(error => dispatch(setError(error.message)))\n}\n\nexport const fetchEditedItem = ({index, text}: {index: number, text: string}) => (dispatch: any) => {\n    fetchFunction(`http://127.0.0.1:8000/api/editItem`, 'PUT', {index, text})\n        .then(res => {\n            if (!res.ok) {\n                dispatch(setError('Server error'))\n            }\n        })\n        .catch(error => dispatch(setError(error.message)))\n}\n\nexport const fetchCleared = () => (dispatch: any) => {\n    fetchFunction(`http://127.0.0.1:8000/api/clearCompleted`, 'POST')\n        .then(res => {\n            if (!res.ok) {\n                dispatch(setError('Server error'))\n            }\n        })\n        .catch(error => dispatch(setError(error.message)))\n}\n\nexport default todoListSlice.reducer\nexport const {\n    setList,\n    setError,\n    addTodo,\n    setUnsavedTodo,\n    changeItemState,\n    changeAllStates,\n    deleteItem,\n    clearCompleted,\n    editItem,\n} = todoListSlice.actions\n\nfunction fetchFunction (url: string, method: string, body: any = undefined): Promise<Response> {\n    return fetch(url, {\n        method,\n        headers: {\n            \"X-Requested-With\": \"XMLHttpRequest\",\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body),\n    })\n}\n","import {useDispatch} from \"react-redux\";\r\nimport {useCallback} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {fetchItemState, fetchDeletedItem, fetchEditedItem} from '../dataBase/todoListSlice';\r\nimport {ITodoItemProps} from '../interfaces';\r\n\r\nexport function TodoItem({item, index, isEditing}: ITodoItemProps) {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const onChangeHandler = useCallback(\r\n        () => {\r\n            dispatch(fetchItemState(index))\r\n        }\r\n    , [index, dispatch])\r\n\r\n    const deleteHandler = useCallback(\r\n        () => {\r\n            dispatch(fetchDeletedItem(index))\r\n        }\r\n    , [index, dispatch])\r\n\r\n    const itemChangeHandler = useCallback(\r\n        (event) => {\r\n            const text = event.target.value\r\n            const body = {\r\n                index,\r\n                text,\r\n            }\r\n            dispatch(fetchEditedItem(body))\r\n        }\r\n    , [index, dispatch])\r\n\r\n    const onBlurHandler = useCallback(\r\n        () => {\r\n            history.push(`/:${index}`)\r\n        }\r\n    , [history, index])\r\n\r\n    const onKeyPressHandler = useCallback(\r\n        (event) => {\r\n            if (event.key === 'Enter') {\r\n                onBlurHandler()\r\n\r\n                if (!event.target.value) {\r\n                    dispatch(fetchDeletedItem(index))\r\n                }\r\n            }\r\n        }\r\n    , [onBlurHandler, dispatch, index])\r\n\r\n    return(\r\n        <li className={(item.isDone ? 'completed ' : '') + (isEditing ? 'editing ' : '')}>\r\n            <div className='view'>\r\n                {\r\n                    !item.hasOwnProperty('unSaved') ? <input className=\"toggle\" type=\"checkbox\" checked={item.isDone} onChange={onChangeHandler} />\r\n                    : <input className=\"toggle\" type=\"checkbox\" checked={item.isDone} readOnly />\r\n                }\r\n                <label>{item.text}</label>\r\n                {\r\n                    !item.hasOwnProperty('unSaved') ? <button className=\"destroy\" onClick={deleteHandler} />\r\n                    : <button className=\"destroy\"/>\r\n                }\r\n            </div>\r\n\r\n            {\r\n                !item.hasOwnProperty('unSaved') ? <input type=\"text\" className='edit' autoFocus={isEditing} value={item.text} onChange={itemChangeHandler} onBlur={onBlurHandler} onKeyPress={onKeyPressHandler} />\r\n                : <></>\r\n            }\r\n        </li>\r\n    )\r\n}\r\n","import {useParams} from 'react-router-dom';\nimport {TodoItem} from './TodoItem';\nimport {IState} from '../interfaces';\nimport {useSelector} from 'react-redux';\n\nexport function TodoList() {\n    const { list, unSaved } = useSelector((state: IState) => state)\n    const params: {\n        filter?: string;\n        type?: 'filter' | 'id';\n        isEditing?: string;\n    } = {...useParams()};\n    // params.type = (params.data && params.data.includes(':')) ? 'id' : 'filter';\n    // const idData: number = (list.length && params.data) ? Math.min(+params.data.slice(1), list.length - 1) : 0;\n    console.log(useParams())\n\n    return (\n        <>\n            {\n                // params.type === 'filter' ?\n                    <ul className='todo-list'>\n                        {unSaved && !params.filter && <TodoItem item={unSaved} index={-1} />}\n                        {list.map((todo, i) => {\n                            if (params.filter === undefined || (params.filter === 'active' && !todo.isDone) || (params.filter === 'completed' && todo.isDone)) {\n                                return <TodoItem item={todo} index={i} key={i}/>\n                            }\n                        })}\n                    </ul>\n            }\n                    {/*</ul> :*/}\n                    {/*<ul className='todo-list'>*/}\n                    {/*    {params.data !== null &&*/}\n                    {/*        <TodoItem*/}\n                    {/*            item = {list[idData]}*/}\n                    {/*            key = {idData}*/}\n                    {/*            index = {idData}*/}\n                    {/*            isEditing = {!!params.isEditing}*/}\n                    {/*        />*/}\n                    {/*    }*/}\n                    {/*</ul>*/}\n        </>\n    )\n}\n","import {fetchCleared} from \"../dataBase/todoListSlice\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useCallback} from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {IState} from '../interfaces';\r\n\r\nexport function Footer() {\r\n    const dispatch = useDispatch()\r\n    const listLength = useSelector((state: IState) => state.list.length)\r\n    const doneTodosAmount = useSelector((state: IState) => state.list.filter(item => item.isDone).length)\r\n\r\n    const clearHandler = useCallback(\r\n        () => {\r\n            dispatch(fetchCleared())\r\n        }\r\n    , [dispatch])\r\n\r\n    return(\r\n        <footer className=\"footer\">\r\n            <span className=\"todo-count\"><strong>{listLength - doneTodosAmount}</strong> item left</span>\r\n            <ul className=\"filters\">\r\n                <li>\r\n                    <NavLink exact to=\"/\" activeClassName=\"selected\" >All</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/active\" activeClassName='selected' >Active</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/completed\" activeClassName='selected' >Completed</NavLink>\r\n                </li>\r\n            </ul>\r\n            {doneTodosAmount ? <button className=\"clear-completed\" onClick = {clearHandler}>Clear completed</button> : <></>}\r\n        </footer>\r\n    )\r\n\r\n}\r\n","import {io} from 'socket.io-client'\r\n\r\nconst socket = io('http://127.0.0.1:8000');\r\n\r\nexport default socket","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {useCallback} from \"react\";\r\nimport {sendTodo, sendUnSavedText} from \"../dataBase/todoListSlice\";\r\nimport {IHeaderProps, IState} from '../interfaces';\r\n\r\nexport function Header({parentState}: IHeaderProps) {\r\n    const error = useSelector((state: IState) => state.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const keyPressHandler = useCallback((e) => {\r\n        if (e.key === 'Enter' && e.target.value) {\r\n            parentState.isTyping = false;\r\n            dispatch(sendTodo(e.target.value))\r\n            e.target.value = ''\r\n        }\r\n    }, [dispatch, parentState])\r\n\r\n    const onChangeHandler = useCallback((e) => {\r\n        parentState.isTyping = true;\r\n        dispatch(sendUnSavedText(e.target.value))\r\n    }, [dispatch, parentState])\r\n\r\n    return(\r\n        <header className=\"header\">\r\n            <h1>todos</h1>\r\n            {!!error && <p className='error-text'>{error}</p>}\r\n            <input className=\"new-todo\" type=\"text\" placeholder=\"What needs to be done?\"\r\n                   autoFocus={!parentState.isEditing}\r\n                   onChange={onChangeHandler} onKeyPress={keyPressHandler}/>\r\n        </header>\r\n    )\r\n}\r\n","import {useCallback} from \"react\";\r\nimport {fetchAllStates} from \"../dataBase/todoListSlice\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {IInputProps} from '../interfaces';\r\n\r\nexport function Input({parentState}: IInputProps) {\r\n    const dispatch = useDispatch()\r\n\r\n    const stateChanger = useCallback(\r\n        () => {\r\n            parentState.isMarked = !parentState.isMarked;\r\n            dispatch(fetchAllStates(parentState.isMarked))\r\n        }\r\n        , [parentState, dispatch])\r\n\r\n    return(\r\n        <>\r\n            <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\"\r\n                   checked={parentState.isMarked} readOnly/>\r\n            <label htmlFor=\"toggle-all\" onClick={stateChanger}>Mark all as complete</label>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react';\nimport {TodoList} from \"./components/TodoList\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n  getList,\n  changeAllStates,\n  addTodo,\n  deleteItem,\n  setUnsavedTodo,\n  changeItemState,\n  clearCompleted,\n  editItem,\n} from \"./dataBase/todoListSlice\";\nimport {Footer} from \"./components/Footer\";\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport socket from './socket';\nimport {IAppState, IState} from './interfaces';\nimport {Header} from \"./components/Header\";\nimport {Input} from \"./components/Input\";\n\nfunction App() {\n  const dispatch = useDispatch()\n  const {list} = useSelector((state: IState) => state)\n\n  const [state] = useState<IAppState>({\n    isMarked: list.filter(item => item.isDone).length === list.length\n        || list.filter(item => item.isDone).length === 0,\n    isEditing: false,\n    isTyping: false,\n  })\n\n  useEffect(() => {\n    console.log('reloaded')\n        socket.on('item:added', ({text}) => {\n          dispatch(addTodo(text))\n        })\n\n        socket.on('item:unSaved', ({text}) => {\n          dispatch(setUnsavedTodo(text))\n        })\n\n        socket.on('item:changedState', ({index}) => {\n          dispatch(changeItemState(index))\n        })\n\n        socket.on('item:deleted', ({index}) => {\n          dispatch(deleteItem(index))\n        })\n\n        socket.on('list:changedAllStates', ({state}) => {\n          dispatch(changeAllStates(state))\n        })\n\n        socket.on('list:cleared', () => {\n          dispatch(clearCompleted())\n        })\n\n        socket.on('item:edited', ({index, text}) => {\n          dispatch(editItem({index, text}))\n        })\n\n        dispatch(getList())\n      })\n\n    return (\n      <>\n        <section className=\"todoapp\">\n          <Header parentState={state} />\n\n          <section className=\"main\">\n            <Input parentState={state} />\n\n            <Router>\n              <Switch>\n                <Route exact path='/:filter([a-zA-z]+)?'>\n                  <TodoList />\n                </Route>\n              </Switch>\n              <Footer />\n            </Router>\n          </section>\n        </section>\n      </>\n  );\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport todoListSlice from \"./todoListSlice\";\r\n\r\nexport const store = configureStore({\r\n    reducer: todoListSlice\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './dataBase/base'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}